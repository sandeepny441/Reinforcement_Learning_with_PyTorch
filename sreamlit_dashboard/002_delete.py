# -*- coding: utf-8 -*-
"""Chapter 05 - Build_a_News_Articles_Summarizer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/towardsai/ragbook-notebooks/blob/main/notebooks/Chapter%2005%20-%20Build_a_News_Articles_Summarizer.ipynb
"""

# Install necessary packages
!pip install -q langchain==0.0.208 openai==0.27.8 python-dotenv newspaper3k

# Mount Google Drive
from google.colab import drive
drive.mount('/content/drive')

# Load environment variables
from dotenv import load_dotenv

# Add your OpenAI API key here
!echo "OPENAI_API_KEY='<OPENAI_API_KEY>'" > .env

load_dotenv()

# Import necessary libraries
import requests
from newspaper import Article

# Define headers for web scraping
headers = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36'
}

# URL of the article to summarize
article_urls = "https://www.artificialintelligence-news.com/2022/01/25/meta-claims-new-ai-supercomputer-will-set-records/"

# Initialize a session
session = requests.Session()

try:
    # Fetch the article
    response = session.get(article_urls, headers=headers, timeout=10)

    if response.status_code == 200:
        # Use Newspaper3k to download and parse the article
        article = Article(article_urls)
        article.download()
        article.parse()

        # Print the article title and text
        print(f"Title: {article.title}")
        print(f"Text: {article.text}")

    else:
        print(f"Failed to fetch article at {article_urls}")
except Exception as e:
    print(f"Error occurred while fetching article at {article_urls}: {e}")

# Import LangChain schema components
from langchain.schema import (
    HumanMessage
)

# Extract article data
article_title = article.title
article_text = article.text

# Prepare template for summarization prompt
template = """You are a very good assistant that summarizes online articles.

Here's the article you want to summarize.

==================
Title: {article_title}

{article_text}
==================

Write a summary of the previous article.
"""

# Format the prompt with the article details
prompt = template.format(article_title=article.title, article_text=article.text)

# Create a HumanMessage for LangChain
messages = [HumanMessage(content=prompt)]

# Import and initialize the ChatOpenAI model
from langchain.chat_models import ChatOpenAI

# Load the model with specified parameters
chat = ChatOpenAI(model_name="gpt-4-turbo", temperature=0)

# Generate summary
summary = chat(messages)
print(summary.content)

# Prepare template for bulleted list summarization
template = """You are an advanced AI assistant that summarizes online articles into bulleted lists.

Here's the article you need to summarize.

==================
Title: {article_title}

{article_text}
==================

Now, provide a summarized version of the article in a bulleted list format.
"""

# Format the prompt with the article details
prompt = template.format(article_title=article.title, article_text=article.text)

# Generate bulleted summary
summary = chat([HumanMessage(content=prompt)])
print(summary.content)

# Prepare template for bulleted list summarization in French
template = """You are an advanced AI assistant that summarizes online articles into bulleted lists in French.

Here's the article you need to summarize.

==================
Title: {article_title}

{article_text}
==================

Now, provide a summarized version of the article in a bulleted list format, in French.
"""

# Format the prompt with the article details
prompt = template.format(article_title=article.title, article_text=article.text)

# Generate bulleted summary in French
summary = chat([HumanMessage(content=prompt)])
print(summary.content)


# Display results
print("Price-Based Features:")
print(price_features.head())